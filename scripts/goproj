#!/bin/python

# Script that handle a list of directories to goto with alias and or indexes

# * Add completion "https://kislyuk.github.io/argcomplete/#specifying-completers"
# * Handle empty directory or '.' as working directory

from os.path import expanduser
from pathlib import Path
from pprint import pprint
from pygit2 import Repository
from subprocess import call

import getopt
import sys
import os

def is_valid_url(url):
    if not os.path.exists(url):
        print(f"{url} does not exists")
        return False
    if not os.path.isdir(url):
        print(f"{url} is not a directory")
        return False
    return True

def is_key_unique(key, projects):
    return key in projects.keys()

def save(ordered_list, project_dictionary, outputfile):
    new_file_contents = "";

    for project_id, project_key in enumerate(ordered_list):
        project_url = project_dictionary[project_key]
        new_file_contents += f"{project_key} {project_url}\n"
    project_file = open(outputfile, 'w')
    project_file.write(new_file_contents)
    project_file.close()

def get_project_list(ordered_list, project_dictionary, getBranch=False):
    output = []
    for project_id, project_key in enumerate(ordered_list):
        project_url = project_dictionary[project_key]
        project_branch = ""

        if getBranch:
            if os.path.exists(project_url+'/.git/'):
                try :
                    repo = Repository(project_url)
                    project_branch = '-- ' + repo.head.name.replace('refs/heads/','')
                except:
                    project_branch = "N/A"

        output.append(f"{project_id} {project_key} {project_url} { project_branch }")
    return output

def print_list(ordered_list, project_dictionary):
    print("\n".join(get_project_list(ordered_list, project_dictionary, True)))

# Configuration Constants
# TODO: create a configuration file to define everything but the configuration
# paths

# Defines an editor
EDITOR= os.environ.get('EDITOR', 'vim')
# Constant for expanding user's home directory
USER_HOME = expanduser("~")

# Absolute path to the storage directory
GOTO_PROJECT_HOME= f"{USER_HOME}/.goto_project"

# Absolute path to the project list fil 
# TODO: refactor for GOTO_PROJECT_HOME_FILE
GOTO_PROJECT_CONFIG= f"{GOTO_PROJECT_HOME}/project_list"

# Fallback action when no action is defined.
DEFAULT_ACTION="LIST"

Path(GOTO_PROJECT_HOME).mkdir(parents=True, exist_ok=True)
Path(GOTO_PROJECT_CONFIG).touch()

# Global Variables

# TODO: document the structure and purpose of projects_available
# projects_available: Dictionary storing the defined projects
# Stores both the project key or alias with the path of the project.
#
# e.g. { 'key1': '/path/key1', 'key2': '/path/key2', 'key2', 'somealias': '/path/to/some/alias` }

projects_available =  {}

# ordered_projects:  List of project keys
# This list is an ordered list of the keys corresponding to the projects
# at projects_available. Acts as a reference to determinate the order of
# the project list. Main use is altering the order before saving changes
# to the GOTO_PROJECT_CONFIG
#
# e.g. [ 'key1', 'key2', 'somealias' ]
ordered_projects = []
perform_bump = False

# getopts
current_action = DEFAULT_ACTION

try:
    options, arg_remainder = getopt.getopt(sys.argv[1:], 'abdehsl', [])
except getopt.GetoptError as e:
    print(e)
    options = [('-h', '')]


for opt, arg in options:
    if opt in ('-a', '--add'):
        current_action = 'ADD'

    if opt in ('-b', '--bump'):
        perform_bump = True

    if opt in ('-d', '--delete'):
        current_action = 'DELETE'

    if opt in ('-e', '--edit'):
        current_action = 'EDIT'

    if opt in ('-l', '--list'):
        current_action = 'LIST'

    if opt in ('-h', '--help'):
        current_action = 'HELP'

    if opt in ('-s', '--show'):
        current_action = 'SHOW'

# Assumption, not changing the default_action ('LIST') while still giving
# arguments means that the user is activating the 'GOTO' action
if current_action == DEFAULT_ACTION and len(arg_remainder) > 0:
    current_action = 'GOTO'

# Load projects into ordered_projects and projects_available
projects_fp = open(GOTO_PROJECT_CONFIG, 'r')
Lines = projects_fp.readlines()

for line in Lines:
    # Skips commented line from the project list
    if not line.startswith('#'):
        project = line.split(' ', 1)
        if len(project) == 2:
            project_key = project[0].strip()
            project_url = project[1].strip()
            ordered_projects.append(project_key)
            projects_available[project_key] = project_url


# Actions
if current_action == 'HELP':
    print("Helps handling workplaces assigning them a key as a shortcut")
    print("goproj can take help you switch between a given list of directories using")
    print("keys or numbers to indicate the choosen item on the lest.")
    print("                          Show the list of paths configured")
    print("      -h --help           Show this help text")
    print("      -a --add KEY PATH   Adds the current path to the top of the workspace list (FILO)")
    print("      -b --bump PATH      bumps the given path to the top of the list")
    print("      -d --delete PATH    delets the path")
    print("      -e                  Open Config file on editor")
    print("      -l --list           Show the list of paths configured")
    print("      -s --show PATH_ID   gets the directory of the selected workspace")

if current_action == 'ADD':

    pprint(arg_remainder)

    new_project_key = arg_remainder[0]
    new_project_url = arg_remainder[1]

    # pprint([new_project_key, new_project_url])
    if is_key_unique(new_project_key, projects_available):
        print(f"{new_project_key} already exists use -c or --change to avoid accidental overrides")
        print(f" {new_project_key} => {projects_available[new_project_key]}")
        exit(1)
    if not is_valid_url(new_project_url):
        exit(1)
    ordered_projects.insert(0, new_project_key)
    projects_available[new_project_key] = os.path.abspath(new_project_url)
    save(ordered_projects, projects_available, GOTO_PROJECT_CONFIG)

if current_action == 'GOTO':
    lookup = arg_remainder[0]
    project_key = lookup
    # TODO: refactor numeric vs key resolv into a funciton for reusability
    if lookup.isdigit():
        project_id = int(lookup)
        if project_id > len(ordered_projects):
            print(f"project_id:{project_id} does not exist in the project list")
            exit(1)
        project_key = ordered_projects[project_id]
    else:
        if project_key not in projects_available.keys():
            print(f"project_key:{project_key} couldn't be found on the project list")

            project_list = get_project_list(ordered_projects, projects_available)
            filter_list = list(filter(lambda project: project_key in project, project_list))

            if len(filter_list) > 0:
                print("\nPosible project matches:")
                # TODO highligt word
                print("\n".join(filter_list))

            print()
            print_list(ordered_projects, projects_available)
            exit(1)

    project_url = projects_available[project_key]
    print(f"GOING TO: {project_key} => {project_url}")

    # Bumping project
    if perform_bump:
        ordered_projects.remove(project_key)
        ordered_projects.insert(0, project_key)
        save(ordered_projects, projects_available, GOTO_PROJECT_CONFIG)

    # change_directory(project_url);
    os.chdir(project_url)
    os.system("/bin/bash")

if current_action == 'LIST':
    print_list(ordered_projects, projects_available)

if current_action == 'SHOW':
    # TODO: enable to show path based on key
    print(projects_available[arg_remainder[0]])

if current_action == 'EDIT':
    call([EDITOR, GOTO_PROJECT_CONFIG])
