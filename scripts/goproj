#!/bin/python

from os.path import expanduser
from pathlib import Path
from pprint import pprint

import getopt
import sys
import os


class ProjectList:
    project_ordered_keys = []
    projects_list = {}

    @staticmethod
    def is_valid_uri(uri):
        if not os.path.exists(uri):
            print(f"{uri} does not exists")
            return False
        if not os.path.isdir(uri):
            print(f"{uri} is not a directory")
            return False
        return True


    @staticmethod
    def is_key_unique(key, projects):
        return key in projects.keys()

    @staticmethod
    def save(ordered_list, project_dictionary, outputfile):
        new_file_contents = "";

        for project_id, project_key in enumerate(ordered_list):
            project_url = project_dictionary[project_key]
            new_file_contents += f"{project_key} {project_url}\n"
        project_file = open(outputfile, 'w')
        project_file.write(new_file_contents)
        project_file.close()

    @staticmethod
    def get_project_list(ordered_list, project_dictionary):
        output = []
        for project_id, project_key in enumerate(ordered_list):
            project_url = project_dictionary[project_key]
            output.append(f"{project_id} {project_key} {project_url}")
        return output

    @staticmethod
    def print_list(ordered_list, project_dictionary):
        print("\n".join(
            ProjectList.get_project_list(
                ordered_list,
                project_dictionary
            )
        ))

USER_HOME = expanduser("~")
GOTO_PROJECT_HOME= f"{USER_HOME}/.goto_project"
GOTO_PROJECT_CONFIG= f"{GOTO_PROJECT_HOME}/project_list"
DEFAULT_ACTION="LIST"

Path(GOTO_PROJECT_HOME).mkdir(parents=True, exist_ok=True)
Path(GOTO_PROJECT_CONFIG).touch()

ordered_projects = []
projects_available =  {}
perform_bump = False

## getopts
current_action = DEFAULT_ACTION

options, remainder = getopt.getopt(sys.argv[1:], 'a', [])
for opt, arg in options:
    if opt in ('-a', '--add'):
        current_action = 'ADD'
    if opt in ('-d', '--delete'):
        current_action = 'DELETE'
    if opt in ('-b', '--bump'):
        perform_bump = True
    if opt in ('-s', '--s'):
        perform_bump = True
if current_action == 'LIST' and len(remainder) > 0:
    current_action = 'GOTO'

### Prase input

## Load projects
projects_fp = open(GOTO_PROJECT_CONFIG, 'r')
Lines = projects_fp.readlines()

for line in Lines:
    if not line.startswith('#'):
        project = line.split(' ', 1)
        if len(project) == 2:
            project_key = project[0].strip()
            project_url = project[1].strip()
            ordered_projects.append(project_key)
            projects_available[project_key] = project_url


## Actions
if current_action == 'ADD':
    new_project_key = remainder[0]
    new_project_url = remainder[1]
    # pprint([new_project_key, new_project_url])
    if is_key_unique(new_project_key, projects_available):
        print(f"{new_project_key} already exists use -c or --change to avoid accidental overrides")
        print(f" {new_project_key} => {projects_available[new_project_key]}")
        exit(1)
    if not is_valid_url(new_project_url):
        exit(1)
    ordered_projects.insert(0, new_project_key)
    projects_available[new_project_key] = new_project_url
    # pprint(ordered_projects)
    # pprint(projects_available)
    save(ordered_projects, projects_available, GOTO_PROJECT_CONFIG)

if current_action == 'GOTO':
    lookup = remainder[0]
    project_key = lookup
    if lookup.isdigit():
        project_id = int(lookup)
        if project_id > len(ordered_projects):
            print(f"project_id:{project_id} does not exist in the project list")
            exit(1)
        project_key = ordered_projects[project_id]
    else:
        if project_key not in projects_available.keys():
            print(f"project_key:{project_key} couldn't be found on the project list")

            project_list = get_project_list(ordered_projects, projects_available)
            filter_list = list(filter(lambda project: project_key in project, project_list))

            if len(filter_list) > 0:
                print("\nPosible project matches:")
                ## TODO highligt word
                print("\n".join(filter_list))

            print()
            print_list(ordered_projects, projects_available)
            exit(1)

    project_url = projects_available[project_key]
    print(f"GOING TO: {project_key} => {project_url}")

    ## Bumping project
    if perform_bump:
        ordered_projects.remove(project_key)
        ordered_projects.insert(0, project_key)
        save(ordered_projects, projects_available, GOTO_PROJECT_CONFIG)

    # change_directory(project_url);
    os.chdir(project_url)
    os.system("/bin/bash")

if current_action == 'LIST':
    print_list(ordered_projects, projects_available)

if __name__ == "__main__"
