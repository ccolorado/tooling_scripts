#!/bin/bash

# dvm, short for docker virtual machine is a helper script docker
# helper script for docker that helps abstracting docker commands
# to be used like a discardable clean environment.
#
# Supports actions: create, start, connect, stop, destroy and upsert
#
# upsert maight not be self explanatory so it connects to a brand
# new container by destroying it if it exists
# 
# Configuration:
# DVM_CONTAINER_NAME=""
# DVM_CONTAINER_SHELL=""
# DVM_CONTAINER_TAG=""
# DVM_STORAGE_DIR="."
# DVM_MOUNTPOINT_DIR="/app"
# DVM_IMAGE_NAME="archlinux:latest"
# DVM_USE_CACHE="false"
# DVM_USE_CURRENT_USERNAME="false"
# DVM_GROUP_USER_MASK="1000:1000"
# CONNECT=""
# CREATE=""
# DESTROY=""
# START=""
# STOP=""
#
#
#
## Configuration Defaults
# # TODO: add defaults for all settings or at least:
# 
#  * DVM_STORAGE_DIR="."
#  * DVM_CONTAINER_NAME=""
#  * DVM_CONTAINER_SHELL="/bin/bash"
#  * DVM_CONTAINER_TAG= $DVM_IMAGE_NAME:$DVM_CONTAINER_NAME  # TODO Think about the dvalue :  unsure about the exact template or escaping : is required
#  * DVM_MOUNTPOINT_DIR="/app"
#  * DVM_USE_CURRENT_USERNAME=  #TODO thing about the dvalue

# TODO: change INIT_CONFIG_FILE from .denv to dvm and dvm.log
# TODO: add override commands to the template "start stop conect" etc
# TODO: Use a multiline echo instead of an escaped string

INIT_CONFIG_FILE="./.denv"
LOG_FILE=$INIT_CONFIG_FILE"_log"
INIT_CONFIG_TEMPLATE="
DVM_STORAGE_DIR=\"\"\nDVM_MOUNTPOINT_DIR=\"/app\"\nDVM_IMAGE_NAME=\"\"\nDVM_CONTAINER_NAME=\"\"\nDVM_CONTAINER_SHELL=\"\"\nDVM_USE_CACHE=\"\"\nCONNECT=\"\"\nCREATE=\"\"\nDESTROY=\"\"\nSTART=\"\"\nSTOP=\"\""

# TODO: Check https://github.com/boxboat/fixuid for better permission transparency

# Override OWNERSHIPMASK or use default
DEFAULT_CURRENT_USER=""
DVM_OWNERSHIP_MASK=""
DVM_USER_CONFIG=""

# if [ -n "$DVM_GROUP_USER_MASK" && -n "$DVM_USE_CURRENT_USERNAME" ]; then
#   # TODO: EMIT warning about current user and ownership mask in confict
#   # TODO: Decide wich seting takes precedent
# fi

# SOLVE OWNERSHIP MASK START
if [ "$DVM_USE_CURRENT_USERNAME" == "true" ]; then
  # TODO: if DVM_GROUP_USER_MASK emit a warning that will be ignored
  DVM_OWNERSHIP_MASK="$(id -u):$(id -g)"
fi

if [ -n "$DVM_GROUP_USER_MASK" ]; then
  DVM_OWNERSHIP_MASK="$DVM_GROUP_USER_MASK"
fi
# SOLVE OWNERSHIP MASK END

if [ -n "$DVM_OWNERSHIP_MASK" ]; then
  DVM_OWNERSHIP_MASK="--user $DVM_OWNERSHIP_MASK"
fi

DVM_GROUP_USER_MASK="1000:1000"


DVM_USER_CONFIG="--user $DVM_OWNERSHIP_MASK"

function log_message {
  echo $1 >> $LOG_FILE
}

# Define functions for each action
function run_cmd {
  log_message "$(date +%s) $1"
  echo "$(date +%s) $1"
  eval $1
  exit_status=$?

  if [ "$exit_status" -ne "0" ]; then
    log_message "$(date +%s) [EXIT_STATUS:$exit_status]"
    exit $exit_status
  fi;
}

function create_container {
  if [ "$DVM_USE_CACHE" = "false" ]; then
    cache="--no-cache"
  fi

  run_cmd "docker build $cache -t $DVM_CONTAINER_TAG ./"


  # TODO: only include -v if declared
  # docker create --name $DVM_CONTAINER_NAME -v $DVM_STORAGE_DIR:$DVM_MOUNTPOINT_DIR $DVM_IMAGE_NAME
}

function start_container {

  volume="-v $DVM_STORAGE_DIR/:$DVM_MOUNTPOINT_DIR/"
  if [[ -n "${DVM_STORAGE_DIR}" && -n "${DVM_MOUNTPOINT_DIR}" ]]; then
    echo "volumes"
    volume="-v $DVM_STORAGE_DIR/:$DVM_MOUNTPOINT_DIR/"
  else
    echo "no volumes"
  fi

  # Check if the container exists
  if [[ "$(docker ps -aq -f name=$DVM_CONTAINER_NAME)" ]]; then
    echo "RESTARTING containt"
    run_cmd "docker start $DVM_CONTAINER_NAME"
  else
    echo "STARTING CONTAINER"
    run_cmd "docker run -d -it $DVM_USER_CONFIG --name $DVM_CONTAINER_NAME $volume $DVM_CONTAINER_TAG"
  fi
}

function connect_container {
  run_cmd "docker exec $DVM_USER_CONFIG -w $DVM_MOUNTPOINT_DIR -it $DVM_CONTAINER_NAME $DVM_CONTAINER_SHELL"
}

function stop_container {

  instance_record=$(docker ps -q -a --filter name=$DVM_CONTAINER_NAME)

  if [ -n "$instance_record" ]; then

    container_status=$(docker inspect -f '{{.State.Running}}' $DVM_CONTAINER_NAME)

    if [ "$container_status" == "true" ]; then
      echo "Stopping containter"
      echo -e "\r\nStopping container..."
      echo $instance_record
      run_cmd "docker stop $instance_record"
    fi
  else
    echo "Container doesn't exists"
  fi

}

function destroy_container {

  log_message "docker ps -q -a --filter name=$DVM_CONTAINER_NAME"
  instance_record=$(docker ps -q -a --filter name=$DVM_CONTAINER_NAME)
  # container_status=$(docker inspect -f '{{.State.Running}}' $DVM_CONTAINER_NAME)

  if [ -n "$instance_record" ]; then
    # docker rm $DVM_CONTAINER_NAME
    run_cmd "docker rm $DVM_CONTAINER_NAME"
    # docker rmi $DVM_IMAGE_NAME
    run_cmd "docker rmi $DVM_IMAGE_NAME"
  fi;

  # CONTAINER_ID=$(docker ps -a --filter name=$DVM_CONTAINER_NAME -q)
  # INSTANCE_RECORD=$(docker ps -a --filter name=$DVM_CONTAINER_NAME)

  # if [[ -z "$CONTAINER_ID" ]]; then
  #   echo "Container doesn't exists"
  #   exit 1
  # fi

  # echo -e "\r\nDestroying Container"

  # echo $INSTANCE_RECORD
  # docker rm $CONTAINER_ID
  # docker rmi $DVM_IMAGE_NAME

  # echo "Active containers:"
  # docker ps -a


}

function upsert_container {
  log_message "-----------------------"
  log_message "| upserting container |"
  log_message "-----------------------"

  visibleStep "1/5 Stopping existing container if exists"
  stop_container
  visibleStep "2/5 Destroying existing container if exists"
  destroy_container
  visibleStep "3/5 Building container"
  create_container
  visibleStep "4/5 Starting container"
  start_container
  visibleStep "5/5 Connecting container"
  connect_container
  visibleStep "dvm upsert finish"
}

function init_dvm {
  test -e $INIT_CONFIG_FILE || echo -e $INIT_CONFIG_TEMPLATE > $INIT_CONFIG_FILE
  $EDITOR $INIT_CONFIG_FILE
}

function visibleStep {
  log_message "$1"
  if [ "$is_powershell_installed" -eq "0" ]; then
    powershell.exe '[console]::beep(261.6,700)'
  fi
  echo -e "\n\n\n\n>>>>\t $1"
  sleep 2
}

function validateConfigFile {
  if [ ! -f "$INIT_CONFIG_FILE" ]; then
    echo "Config file $INIT_CONFIG_FILE not found"
    echo "Please run: $0 init"
    exit 5
  fi
}

# wsl beep
type powershell.exe &> /dev/null
is_powershell_installed=$?


source $INIT_CONFIG_FILE

# Check command argument and call the corresponding function
case "$1" in
  "create")
    validateConfigFile && create_container
    ;;
  "start")
    validateConfigFile && start_container
    ;;
  "connect")
    validateConfigFile && connect_container
    ;;
  "stop")
    validateConfigFile && stop_container
    ;;
  "destroy")
    validateConfigFile && destroy_container
    ;;
  "upsert")
    validateConfigFile && upsert_container
    ;;
  "init")
    init_dvm
    ;;
  *)
    echo "Error: Invalid command. Please use create, start, connect, stop, destroy, or upsert."
    exit 1
esac

exit 0
