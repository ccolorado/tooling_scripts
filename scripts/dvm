#!/bin/bash

# dvm, short for docker virtual machine is a helper script docker
# helper script for docker that helps abstracting docker commands
# to be used like a discardable clean environment.
#
# Supports actions: create, start, connect, stop, destroy and upsert
#
# upsert maight not be self explanatory so it connects to a brand
# new container by destroying it if it exists

INIT_CONFIG_FILE="./.denv"
INIT_CONFIG_TEMPLATE="
STORAGE_DIR=\"\"\nMOUNTPOINT_DIR=\"/app\"\nIMAGE_NAME=\"\"\nCONTAINER_NAME=\"\"\nDVM_CACHE=\"\""

# Define functions for each action

function create_container {
  cache=""
  if [ "$DVM_CACHE" -eq "false" ]; then
    cache="--no-cache"
  fi

  docker build $cache -t $IMAGE_NAME .
  # TODO: only include -v if declared
  # docker create --name $CONTAINER_NAME -v $STORAGE_DIR:$MOUNTPOINT_DIR $IMAGE_NAME
}

function start_container {

  volume=""
  if [ -n "$STORAGE_DIR"  &&  -n "$MOUNTPOINT_DIR"  && ]; then
    valume="-v $STORAGE_DIR/:$MOUNTPOINT_DIR/"
  fi

  # test first if running container exists
  # CONTAINER_ID=$(docker ps --filter name=$CONTAINER_NAME -q)
  # docker start $CONTAINER_NAME
  docker run --detach -it --name $CONTAINER_NAME $volume $IMAGE_NAME
}

function connect_container {
  docker exec -it $CONTAINER_NAME /bin/bash
}

function stop_container {

  instance_record=$(docker ps -q -a --filter name=$CONTAINER_NAME)

  if [ -n "$instance_record" ]; then

    container_status=$(docker inspect -f '{{.State.Running}}' $CONTAINER_NAME)

    if [ "$container_status" == "true" ]; then
      echo "Stopping containter"
      echo -e "\r\nStopping container..."
      echo $instance_record
      docker stop $instance_record
    fi
  else
    echo "Container doesn't exists"
  fi

}

function destroy_container {

  instance_record=$(docker ps -q -a --filter name=$CONTAINER_NAME)

  if [ -n "$instance_record" ]; then
    docker rm $CONTAINER_NAME
    docker rmi $IMAGE_NAME
  fi;

  # CONTAINER_ID=$(docker ps -a --filter name=$CONTAINER_NAME -q)
  # INSTANCE_RECORD=$(docker ps -a --filter name=$CONTAINER_NAME)

  # if [[ -z "$CONTAINER_ID" ]]; then
  #   echo "Container doesn't exists"
  #   exit 1
  # fi

  # echo -e "\r\nDestroying Container"

  # echo $INSTANCE_RECORD
  # docker rm $CONTAINER_ID
  # docker rmi $IMAGE_NAME

  # echo "Active containers:"
  # docker ps -a


}

function upsert_container {
  visibleStep "1/5 Stopping existing container"
  stop_container
  visibleStep "2/5 Destroying existing container"
  destroy_container
  visibleStep "3/5 Creating container"
  create_container
  visibleStep "4/5 Starting container"
  start_container
  visibleStep "5/5 Connecting container"
  connect_container
  visibleStep "dvm upsert finish"
}

function init_dvm {
  test -e $INIT_CONFIG_FILE || echo -e $INIT_CONFIG_TEMPLATE > $INIT_CONFIG_FILE
  $EDITOR $INIT_CONFIG_FILE
}

function visibleStep {
  if [ "$is_powershell_installed" -eq "0" ]; then
    powershell.exe '[console]::beep(261.6,700)'
  fi
  echo -e "\n\n\n\n>>>>\t $1"
  sleep 2
}

# wsl beep
type powershell.exe &> /dev/null
is_powershell_installed=$?

if [ ! -f "$INIT_CONFIG_FILE" ]; then
  echo "Config file $INIT_CONFIG_FILE not found"
  echo "Please run: $0 init"
  exit 5
fi

source $INIT_CONFIG_FILE

set -e
set -x
# Check command argument and call the corresponding function
case "$1" in
  "create")
    create_container
    ;;
  "start")
    start_container
    ;;
  "connect")
    connect_container
    ;;
  "stop")
    stop_container
    ;;
  "destroy")
    destroy_container
    ;;
  "upsert")
    upsert_container
    ;;
  "init")
    init_dvm
    ;;
  *)
    echo "Error: Invalid command. Please use create, start, connect, stop, destroy, or upsert."
    exit 1
esac

exit 0
